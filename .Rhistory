}
p
}
primest(5)
primest <- function(n){
p <- 2:n
i <- 1
while (p[i] <= sqrt(n)) {
print(p[i])
p <-  p[p %% p[i] != 0 | p==p[i]]
i <- i+1
}
p
}
primest(5)
?sample
?runif
coin_toss<-function(n){
u<-runif(1)
print(u)
}
coin_toss(5)
coin_toss<-function(n){
u<-runif(1)
print(u)
}
coin_toss(5)
coin_toss(5)
coin_toss(5)
coin_toss(5)
coin_toss<-function(n){
u<-runif(1)
result <-"heads"
if (u>0.5) then result <- "tails"
print(result)
}
coin_toss(5)
u<-runif(1)
result <-c("heads")
if (u>0.5) then result <- c("tails")
u<-runif(1)
coin_toss<-function(n){
u<-runif(1)
result <-c("heads")
if (u>0.5) result <- c("tails")
print(result)
}
coin_toss(5)
result <-"heads"
coin_toss<-function(n){
u<-runif(1)
result <-"heads"
if (u>0.5) result <- "tails"
print(result)
}
coin_toss(5)
print(result)
print(result)
class(result)
typeof(result)
rm(list=ls())
coin_toss(5)
coin_toss<-function(n){
u<-runif(1)
result <-"heads"
if (u>0.5) result <- "tails"
print(result)
}
coin_toss(5)
print(result)
?mod
150%10
150%%10
155%%10
coin_toss<-function(n){
u<-runif(1)
result <-"heads"
if (u>0.5) result <- "tails"
if (n%%100)  print(result)
}
coin_toss(500)
coin_toss<-function(n){
u<-runif(1)
result <-"heads"
if (u>0.5) result <- "tails"
if (n%%100==0)  print(result)
}
coin_toss(500)
coin_toss<-function(n){
u<-runif(1)
for (i in 1:n){
result <-"heads"
if (u>0.5) result <- "tails"
if (n%%100==0)  print(result)
}
}
coin_toss(500)
coin_toss<-function(n){
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
if (i%%100==0)  print(result)
}
}
coin_toss(500)
j = 1
J++
;
k = j++
1
k
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print ("Proprotion of heads",heads_count/i)
}
}
}
coin_toss(500)
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print (c("Proportion of heads",heads_count/i))
}
}
}
coin_toss(500)
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print (paste("Proportion of heads",heads_count/i))
}
}
}
coin_toss(500)
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print (paste("Proportion of heads",heads_count/i))
}
}
}
coin_toss(500)
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print (paste("Proportion of heads",heads_count/i-0.5))
}
}
}
coin_toss(500)
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print (paste("Proportion of heads",heads_count/i-0.5))
}
}
}
coin_toss(500)
coin_toss<-function(n){
heads_count <- 0
for (i in 1:n){
result <-"heads"
u<-runif(1)
if (u>0.5) result <- "tails"
else heads_count <- heads_count + 1
if (i%%100==0)  {
print(result)
print (paste("Prop",heads_count/i-0.5, "No:",heads_count - i/2))
}
}
}
coin_toss(500)
sample()
?sample
sample(0,1,1)
sample(0,1,1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
?seq
seq(1,5,2)
seq(100,500,100)
seq(100,550,100)
?cumsum
coin_toss <- function(n, step=100) {
# Record number of heads at each step
tosses <- cumsum(sample(c(0,1), n, replace=TRUE))
# Define steps for summaries
steps <- seq(step,n, by=step)
# Compute summaries
cbind(tosses[steps] / steps - .5, tosses[steps] - steps/2)
}
coin_toss(500)
library(sqldf)
install.packages(sqldf)
install.packages('sqldf')
library(sqldf)
data(titanic3, package=”PASWR”)
data(titanic3)
.25*.1
.25*.1+.5*.4+.75*.3+.2
.25*.1/.5
.25*.1/.65
.4*.4/.65
.4*.4/.5
.4*.5/.65
.3*.75/.65
.2/.65
install.packages(supclust)
install.packages('supclust')
## Working with a "real" microarray dataset
data(leukemia, package="supclust")
View(leukemia.x)
leukemia.y
leukemia.z
set.seed(724)
xN <- matrix(rnorm(750), nrow = 3, ncol = 250)
fit  <- wilma(leukemia.x, leukemia.y, noc = 3, trace = 1)
library('supclust')
fit  <- wilma(leukemia.x, leukemia.y, noc = 3, trace = 1)
fit
summary(fit)
plot(fit)
fitted(fit)
predict(fit, type = "cla")
predict(fit, type = "fitt")
## Predicting fitted values and class labels for test data
predict(fit, newdata = xN)
predict(fit, newdata = xN, type = "cla", classifier = "nnr", noc = c(1,2,3))
predict(fit, newdata = xN, type = "cla", classifier = "dlda", noc = c(1,3))
predict(fit, newdata = xN, type = "cla", classifier = "logreg")
predict(fit, newdata = xN, type = "cla", classifier = "aggtrees")
predict(fit, type = "cla")
predict(fit, type = "fitt")
system("ls -F")
t1<-try(system("ls"))
t1<-try(system("ls", intern=TRUE))
t1
rm(list = ls())
graphics.off()
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
View(mydata)
rm(list = ls())
graphics.off()
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
mydata$word = NULL
rownames(mydata)<-word
d = dist(mydata,method="euclidean")
fit = hclust(d, method="ward")
colLab <- function(n){
if (is.leaf(n)){
a<- attributes(n)
attr(n, "label")<- substr(a$label, 1, 10)
attr(n, "nodePar")<- c(a$nodePar, lab.col ='red')
}
n
}
require(graphics)
clusdendro = as.dendogram(fit)
clusdendro = dendrapply(clusdendro, colLab)
op = par(mar=par("mar")+c(0,0,2))
plot(clusdendro)
clusdendro = as.denrdogram(fit)
clusdendro = as.dendrogram(fit)
clusdendro = dendrapply(clusdendro, colLab)
op = par(mar=par("mar")+c(0,0,2))
plot(clusdendro)
groups <- cutree(fit , k =3)
rect.hclust(fit,k=3,border="red")
groups
clusterdf = data.frame(groups)
View(clusterdf)
table(clusterdf$groups)
mydata1 = mydata.t()
mydata1 = mydata.T
mydata1 = t(mydata)
View(mydata1)
mydata = mydata1
d = dist(mydata,method="euclidean")
fit = hclust(d, method="ward")
colLab <- function(n){
if (is.leaf(n)){
a<- attributes(n)
attr(n, "label")<- substr(a$label, 1, 10)
attr(n, "nodePar")<- c(a$nodePar, lab.col ='red')
}
n
}
require(graphics)
clusdendro = as.dendrogram(fit)
clusdendro = dendrapply(clusdendro, colLab)
op = par(mar=par("mar")+c(0,0,2))
plot(clusdendro)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
View(mydata)
rm(list = ls())
graphics.off()
library(rpart)
library(rpart.plot)
library(randomForest)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
mydata1 = t(mydata)
mydata = as.data.frame(mydata1)
View(mydata)
View(mydata1)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
mydata$word = NULL
mydata1 = t(mydata)
mydata = as.data.frame(mydata1)
View(mydata)
colnames(mydata) = word
View(mydata)
labels = rownames(mydata)
mydata$speaker = labels
View(mydata)
names(mydata)
mydata$speaker
cart1 = rpart(speaker ~. data = mydata, method = "class")
cart1 = rpart(speaker ~., data = mydata, method = "class")
prp(cart1)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
prp(cart1)
cart1 = rpart(speaker ~., data = mydata, method = "class", cp=0.006)
prp(cart1)
cart1 = randomForest(speaker ~., data = mydata)
names(mydata)
rm(list = ls())
graphics.off()
library(rpart)
library(rpart.plot)
library(randomForest)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
mydata$word = NULL
mydata1 = t(mydata)
mydata = as.data.frame(mydata1)
colnames(mydata) = word
labels = rownames(mydata)
mydata$speaker = as.factor(labels)
rf1 = randomForest(speaker ~., data = mydata)
varImpPlot(rf1)
names(mydata)[names(mydata) == '401k'] <- 'w_401k'
labels = rownames(mydata)
mydata$speaker = as.factor(labels)
rf1 = randomForest(speaker ~., data = mydata)
names(mydata)=="else"
mydata["else"]
View(mydata)
rm(list = ls())
graphics.off()
library(rpart)
library(rpart.plot)
library(randomForest)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
mydata$word = NULL
mydata1 = t(mydata)
mydata = as.data.frame(mydata1)
colnames(mydata) = word
names(mydata)[names(mydata) == '401k'] <- 'w_401k'
labels = rownames(mydata)
mydata$speaker = as.factor(labels)
View(mydata)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
labels = colnames(mydata)
View(mydata)
mydta$X=NULL
mydata$X=NULL
labels = colnames(mydata)
rm(list = ls())
graphics.off()
library(rpart)
library(rpart.plot)
library(randomForest)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
mydata$X=NULL
mydata$word = NULL
labels = colnames(mydata)
mydata1 = t(mydata)
mydata = as.data.frame(mydata1)
colnames(mydata) = word
names(mydata)[names(mydata) == '401k'] <- 'w_401k'
mydata$speaker = as.factor(labels)
View(mydata)
rf1 = randomForest(speaker ~., data = mydata)
names(mydata)[names(mydata) == 'else'] <- 'w_else'
rf1 = randomForest(speaker ~., data = mydata)
names(mydata)[names(mydata) == '21st'] <- 'w_21st'
rf1 = randomForest(speaker ~., data = mydata)
names(mydata)[names(mydata) == '11th'] <- 'w_11th'
rf1 = randomForest(speaker ~., data = mydata)
names(mydata)[names(mydata) == '73000page'] <- 'w_73000page'
rf1 = randomForest(speaker ~., data = mydata)
colnames(mydata) = paste("w",word,sep="_")
names(mydata)
rm(list = ls())
graphics.off()
library(rpart)
library(rpart.plot)
library(randomForest)
setwd("/Users/gopalakrishnatadiparthi/Documents/PythonPrograms/debate-parser")
mydata = read.csv("wordfreq.csv")
word = mydata$word;
mydata$X=NULL
mydata$word = NULL
labels = colnames(mydata)
mydata1 = t(mydata)
mydata = as.data.frame(mydata1)
colnames(mydata) = paste("w",word,sep="_")
names(mydata)
mydata$speaker = as.factor(labels)
View(mydata)
rf1 = randomForest(speaker ~., data = mydata)
varImpPlot(rf1)
partialPlot(rf1, mydata, youll, "TRUMP")
partialPlot(rf1, mydata, mydata$youll, "TRUMP")
importance(rf1)
partialPlot(rf1, mydata, mydata$w_youll, "TRUMP")
partialPlot(rf1, mydata,w_youll, "TRUMP")
data(airquality)
airquality <- na.omit(airquality)
set.seed(131)
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
imp <- importance(ozone.rf)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(ozone.rf, airquality, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
par(op)
partialPlot(rf1, mydata,w_youll, speaker)
imp <- importance(rf1)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in seq_along(impvar)) {
partialPlot(rf1, mydata, impvar[i], xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
impvar
seq_along(impvar)
for (i in 1:10) {
partialPlot(rf1, mydata, impvar[i], "TRUMP", xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]),
ylim=c(30, 70))
}
imp <- importance(rf1)
impvar <- rownames(imp)[order(imp[, 1], decreasing=TRUE)]
op <- par(mfrow=c(2, 3))
for (i in 1:10) {
partialPlot(rf1, mydata, impvar[i], "TRUMP", xlab=impvar[i],
main=paste("Partial Dependence on", impvar[i]))
}
par(op)
